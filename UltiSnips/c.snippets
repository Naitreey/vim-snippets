###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
# define ${1} ${2}
${VISUAL}
#endif
endsnippet

snippet ifdef "#ifdef ... #endif" b
#ifdef ${0}
${VISUAL}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1}
${VISUAL}${0}
#endif
endsnippet

snippet stdio "stdio header file" b
#include <stdio.h>$0
endsnippet

snippet unistd "unistd header file" b
#include <unistd.h>$0
endsnippet

snippet stdlib "stdlib header file" b
#include <stdlib.h>$0
endsnippet

snippet strings "strings header file" b
#include <strings.h>$0
endsnippet

snippet string "string header file" b
#include <string.h>$0
endsnippet

snippet math "math header file" b
#include <math.h>$0
endsnippet

snippet is "include standard headers" b
#include <${1}>$0
endsnippet

snippet io "include other headers" b
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main()" w
int
main(${1})
{
	${0}${VISUAL}
	return 0;
}
endsnippet

snippet for "for loop" w
for ($1) {
	${VISUAL}${0}
}
endsnippet

snippet while "while loop" w
while ($1) {
	${VISUAL}$0
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${1}
} while(${0});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet /* "/*...*/" w
/* ${VISUAL}$0 */
endsnippet

# the regex pattern is for excluding
# `#if` from matches
snippet "(^|(?<=[^#]))\bif" "if" r
if ($1) {
	$0${VISUAL}
}
endsnippet

snippet else "else" w
else {
	$0${VISUAL}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet func "function" b
$1
{
	${VISUAL}${0}
}
endsnippet

snippet switch "switch" b
switch (${1}) {
	case ${2}:
		${0}${VISUAL}
		break;
	default:

		break;
}
endsnippet

# vim:ft=snippets:
